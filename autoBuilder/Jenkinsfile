pipeline {
    agent any
    environment {
        USERNAME = 'bella2391'
        REPO_NAME = 'Jenkin-Dependency-Provider'
        BRANCH_NAME = 'master'
        REPO_URL = "https://github.com/${USERNAME}/${REPO_NAME}.git"
        JAR_PATH = 'build/libs/FMC-Dependency-1.0.0.jar'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${BRANCH_NAME}",
                url: "${REPO_URL}"
            }
        }
        stage('Build') {
            steps {
                sh './gradlew build'
            }
        }
        stage('Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh './gradlew test'
                }
            }
        }
        stage('Configure Git') {
            steps {
                withCredentials([
                    string(credentialsId: 'GitUserName', variable: 'GIT_USER_NAME'),
                    string(credentialsId: 'GitUserEmail', variable: 'GIT_USER_EMAIL')
                ]) {
                    sh '''
                    git config --global user.name "${GIT_USER_NAME}"
                    git config --global user.email "${GIT_USER_EMAIL}"
                    '''
                }
            }
        }
        stage('Tag') {

        }
        stage('Tag') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GitHub-Token', variable: 'GIT_TOKEN')]) {
                        sh '''
                        if git rev-parse "refs/tags/${REPO_NAME}-${BUILD_NUMBER}" >/dev/null 2>&1; then
                            echo "Tag ${REPO_NAME}-${BUILD_NUMBER} already exists. Skipping tag creation."
                        else
                            git tag -a "${REPO_NAME}-${BUILD_NUMBER}" -m "Jenkins Build #${BUILD_NUMBER}"
                        fi
                        '''
                    }
                }
            }
        }
        stage('Create Release on GitHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GitHub-Token', variable: 'GIT_TOKEN')]) {
                        def response = httpRequest(
                            acceptType: 'APPLICATION_JSON',
                            contentType: 'APPLICATION_JSON',
                            httpMode: 'POST',
                            url: "https://api.github.com/repos/${USERNAME}/${REPO_NAME}/releases",
                            requestBody: """{
                                "tag_name": "${REPO_NAME}-${BUILD_NUMBER}",
                                "name": "Release ${BUILD_NUMBER}",
                                "body": "Release description",
                                "draft": false,
                                "prerelease": false
                            }""",
                            customHeaders: [[name: 'Authorization', value: "token ${GIT_TOKEN}"]]
                        )
                        
                        if (response.status == 422) {
                            echo "GitHub Release creation failed: ${response.content}"
                        } else {
                            echo "GitHub Release created successfully: ${response.content}"
                        }
                        
                        def releaseId = new groovy.json.JsonSlurper().parseText(response.content).id
                        echo "GitHub Release ID: ${releaseId}"

                        def jarFilePath = "${JAR_PATH}"
                        if (!fileExists(jarFilePath)) {
                            error "JAR file not found: ${jarFilePath}"
                        }
                        def jarFileBytes = readFile(file: jarFilePath, encoding: 'ISO-8859-1').getBytes('ISO-8859-1')
                        def uploadUrl = "https://uploads.github.com/repos/${USERNAME}/${REPO_NAME}/releases/${releaseId}/assets?name=${jarFilePath.split('/').last()}"

                        def uploadResponse = httpRequest(
                            acceptType: 'APPLICATION_JSON',
                            contentType: 'APPLICATION_OCTETSTREAM',
                            httpMode: 'POST',
                            url: uploadUrl,
                            requestBody: new String(jarFileBytes, 'ISO-8859-1'),
                            customHeaders: [[name: 'Authorization', value: "token ${GIT_TOKEN}"],
                                            [name: 'Content-Type', value: 'application/java-archive']]
                        )
                        echo "GitHub Upload Response: ${uploadResponse}"
                    }
                }
            }
        }
    }
}